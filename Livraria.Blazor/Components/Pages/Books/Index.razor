@page "/livros"
@inject IBookService bookService
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Catalogo de Livros</PageTitle>

<h3>Livros</h3>

@switch (Status)
{
    case ResponseStatus.Loading:
        <ShowLoading/>
        break;
    case ResponseStatus.Error:
    {
        <ShowError Errors="Errors"/>
        break;
    }
    case ResponseStatus.Success:
    default:
    {
        <table class="table">
            <thead>
            <tr>
                <th>Título</th>
                <th>Autor</th>
                <th>Ano de Publicação</th>
                <th>Editora</th>
                <th>Categoria</th>
                <th>Capa</th>
                <th>Sinopse</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var book in Books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.PublishedAt</td>
                    <td>@book.PublishingCompany</td>
                    <td>@book.Category</td>
                    <td>@book.Cover</td>
                    <td>@book.Synopsis</td>
                </tr>
            }
            </tbody>
        </table>
        <NavLink class="btn btn-primary" href="/livros/novo-livro">Novo Livro</NavLink>
        break;
    }
}


@code {
    private List<ViewBook> Books { get; } = [];
    private ResponseStatus Status { get; set; } = ResponseStatus.Loading;
    private List<string> Errors { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var response = await bookService.GetAll();
        Books.AddRange(response.Data.SelectMany(x => x));
        Errors = response.Errors;
        Status = response.Status;
    }


}