@inject IBookService bookService


<h3>@Title</h3>

<div class="row justify-content-center">
    <div class="col-6">
        <EditForm Enhance="true" method="post" FormName="BookForm" OnValidSubmit="OnValidSubmit" Model="@Book">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="title" class="form-label">Título</label>
                <InputText id="title" class="form-control" @bind-Value="Book.Title" />
                <ValidationMessage For="@(() => Book.Title)" />
            </div>
            <div class="mb-3">
                <label for="author" class="form-label">Autor</label>
                <InputText id="author" class="form-control" @bind-Value="Book.Author" />
                <ValidationMessage For="@(() => Book.Author)" />
            </div>
            <div class="mb-3">
                <label for="publishedAt" class="form-label">Ano de Publicação</label>
                <InputDate id="publishedAt" class="from-control" @bind-Value="Book.PublishedAt" />
                <ValidationMessage For="@(() => Book.PublishedAt)" />
            </div>
            <div class="mb-3">
                <label for="publishingCompany" class="form-label">Editora</label>
                <InputSelect id="publishingCompany" class="form-control" @bind-Value="Book.PublishingCompany">
                    <option value="">Selecione...</option>
                    @foreach (var item in Enum.GetValues(typeof(PublishingCompany)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Book.PublishingCompany)" />
            </div>
            <div class="mb3">
                <label for="category" class="form-label">Categoria</label>
                <InputSelect id="category" class="form-control" @bind-Value="Book.Category">
                    <option value="">Selecione...</option>
                    @foreach (var item in Enum.GetValues(typeof(Category)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Book.Category)" />
            </div>
            <div class="mb-3">
                <label for="cover" class="from-label">Capa</label>
                <InputText id="cover" class="form-control" @bind-Value="Book.Cover" />
                <ValidationMessage For="@(() => Book.Cover)" />
            </div>
            <div class="mb-3">
                <label for="synopsis" class="from-label">Sinopse</label>
                <InputTextArea id="synopsis" class="form-control" @bind-Value="Book.Synopsis" />
                <ValidationMessage For="@(() => Book.Synopsis)" />
            </div>
            <button type="submit" class="btn btn-primary">Salvar</button>
            <a class="btn btn-danger" href="/livros/apagar/@Book.Id">Apagar</a>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public EventCallback<ViewBook> OnObjectChange { get; set; }
    [Parameter] public EventCallback<ResponseStatus?> OnStatusChange { get; set; }
    [Parameter] public EventCallback<List<string>> OnErrorsChange { get; set; }

    [SupplyParameterFromForm( FormName = "BookForm" )]
    public EditBook Book { get; set; }
        = new EditBook( "", "", DateTime.Now, PublishingCompany.Nenhum, Category.Nenhum, 0 );

    private string Title { get; set; } = string.Empty;

    private ResponseStatus? Status { get; set; }
    private ViewBook Response { get; set; } = null!;
    private List<string> Errors { get; set; } = new List<string>();

    protected override async void OnInitialized ()
    {
        int bookId = int.Parse(Id);
        Title = bookId == 0
            ? "Novo Livro"
            : "Editar Livro";
        Book = await getBook( bookId );
    }
    
    private async Task<EditBook> getBook ( int id )
    {
        if ( id == 0 ) return getBook();
        try
        {
            var response = await bookService.GetById(id);
            var viewBook = response.Data.First();
            return ( EditBook ) viewBook;
        }
        catch ( Exception ex )
        {
            Status = ResponseStatus.Error;
            Errors.Add( ex.Message );
            return getBook();
        }
    }
    private EditBook getBook ()
        => new EditBook( "", "", DateTime.Now, PublishingCompany.Nenhum, Category.Nenhum, 0 );

    private async Task OnAction ( EditBook book )
    {
        int bookId = int.Parse(Id);
        try
        {
            var response = bookId == 0
    ? await bookService.Create(book)
    : await bookService.Update(book);
            Status = response.Status;
            Response = response.Data.First();
            Errors.AddRange( response.Errors );
        }
        catch ( Exception ex )
        {
            Status = ResponseStatus.Error;
            Errors.Add( ex.Message );
        }
    }


    private async Task OnValidSubmit ()
    {
        await OnAction( Book );
        await OnObjectChange.InvokeAsync( Response );
        await OnStatusChange.InvokeAsync( Status );
        await OnErrorsChange.InvokeAsync( Errors );
    }
}
